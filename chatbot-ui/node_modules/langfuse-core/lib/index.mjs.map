{"version":3,"file":"index.mjs","sources":["../src/types.ts","../src/utils.ts","../src/eventemitter.ts","../src/release-env.ts","../src/prompts/promptClients.ts","../src/prompts/promptCache.ts","../src/storage-memory.ts","../src/index.ts"],"sourcesContent":["import { type LangfuseObjectClient } from \"./index\";\nimport { type LangfusePromptClient } from \"./prompts/promptClients\";\nimport { type components, type paths } from \"./openapi/server\";\n\nexport type LangfuseCoreOptions = {\n  // Langfuse API publicKey obtained from the Langfuse UI project settings\n  publicKey?: string;\n  // Langfuse API secretKey obtained from the Langfuse UI project settings\n  secretKey?: string;\n  // Langfuse API baseUrl (https://cloud.langfuse.com by default)\n  baseUrl?: string;\n  // The number of events to queue before sending to Langfuse (flushing)\n  flushAt?: number;\n  // The interval in milliseconds between periodic flushes\n  flushInterval?: number;\n  // How many times we will retry HTTP requests\n  fetchRetryCount?: number;\n  // The delay between HTTP request retries\n  fetchRetryDelay?: number;\n  // Timeout in milliseconds for any calls. Defaults to 10 seconds.\n  requestTimeout?: number;\n  // release (version) of the application, defaults to env LANGFUSE_RELEASE\n  release?: string;\n  // integration type of the SDK.\n  sdkIntegration?: string; // DEFAULT, LANGCHAIN, or any other custom value\n  // Enabled switch for the SDK. If disabled, no observability data will be sent to Langfuse. Defaults to true.\n  enabled?: boolean;\n  // Mask function to mask data in the event body\n  mask?: MaskFunction;\n};\n\nexport enum LangfusePersistedProperty {\n  Props = \"props\",\n  Queue = \"queue\",\n  OptedOut = \"opted_out\",\n}\n\nexport type LangfuseFetchOptions = {\n  method: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\";\n  headers: { [key: string]: string };\n  body?: string;\n  signal?: AbortSignal;\n};\n\nexport type LangfuseFetchResponse<T = any> = {\n  status: number;\n  text: () => Promise<string>;\n  json: () => Promise<T>;\n};\n\nexport type LangfuseObject = SingleIngestionEvent[\"type\"];\n\nexport type LangfuseQueueItem = SingleIngestionEvent & {\n  callback?: (err: any) => void;\n};\n\nexport type SingleIngestionEvent =\n  paths[\"/api/public/ingestion\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"][\"batch\"][number];\n\n// return type of ingestion endpoint defined on 200 status error in fern as 207 is not possible\nexport type IngestionReturnType =\n  paths[\"/api/public/ingestion\"][\"post\"][\"responses\"][200][\"content\"][\"application/json\"];\n\nexport type LangfuseEventProperties = {\n  [key: string]: any;\n};\n\nexport type LangfuseMetadataProperties = {\n  [key: string]: any;\n};\n\n// ASYNC\nexport type CreateLangfuseTraceBody = FixTypes<components[\"schemas\"][\"TraceBody\"]>;\n\nexport type CreateLangfuseEventBody = FixTypes<components[\"schemas\"][\"CreateEventBody\"]>;\n\nexport type CreateLangfuseSpanBody = FixTypes<components[\"schemas\"][\"CreateSpanBody\"]>;\nexport type UpdateLangfuseSpanBody = FixTypes<components[\"schemas\"][\"UpdateSpanBody\"]>;\nexport type EventBody =\n  | CreateLangfuseTraceBody\n  | CreateLangfuseEventBody\n  | CreateLangfuseSpanBody\n  | CreateLangfuseGenerationBody\n  | CreateLangfuseScoreBody\n  | UpdateLangfuseSpanBody\n  | UpdateLangfuseGenerationBody;\n\nexport type Usage = FixTypes<components[\"schemas\"][\"IngestionUsage\"]>;\nexport type CreateLangfuseGenerationBody = FixTypes<components[\"schemas\"][\"CreateGenerationBody\"]>;\nexport type UpdateLangfuseGenerationBody = FixTypes<components[\"schemas\"][\"UpdateGenerationBody\"]>;\n\nexport type CreateLangfuseScoreBody = FixTypes<components[\"schemas\"][\"ScoreBody\"]>;\n\n// SYNC\nexport type GetLangfuseTracesQuery = FixTypes<paths[\"/api/public/traces\"][\"get\"][\"parameters\"][\"query\"]>;\nexport type GetLangfuseTracesResponse = FixTypes<\n  paths[\"/api/public/traces\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseTraceResponse = FixTypes<\n  paths[\"/api/public/traces/{traceId}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseObservationsQuery = FixTypes<paths[\"/api/public/observations\"][\"get\"][\"parameters\"][\"query\"]>;\nexport type GetLangfuseObservationsResponse = FixTypes<\n  paths[\"/api/public/observations\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseObservationResponse = FixTypes<\n  paths[\"/api/public/observations/{observationId}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseSessionsQuery = FixTypes<paths[\"/api/public/sessions\"][\"get\"][\"parameters\"][\"query\"]>;\nexport type GetLangfuseSessionsResponse = FixTypes<\n  paths[\"/api/public/sessions\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseDatasetParams = FixTypes<\n  paths[\"/api/public/v2/datasets/{datasetName}\"][\"get\"][\"parameters\"][\"path\"]\n>;\nexport type GetLangfuseDatasetResponse = FixTypes<\n  paths[\"/api/public/v2/datasets/{datasetName}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseDatasetItemsQuery = paths[\"/api/public/dataset-items\"][\"get\"][\"parameters\"][\"query\"];\nexport type GetLangfuseDatasetItemsResponse = FixTypes<\n  paths[\"/api/public/dataset-items\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetRunItemBody = FixTypes<\n  paths[\"/api/public/dataset-run-items\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetRunItemResponse = FixTypes<\n  paths[\"/api/public/dataset-run-items\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetBody =\n  paths[\"/api/public/v2/datasets\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"];\nexport type CreateLangfuseDatasetResponse = FixTypes<\n  paths[\"/api/public/v2/datasets\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetItemBody = FixTypes<\n  paths[\"/api/public/dataset-items\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfuseDatasetItemResponse = FixTypes<\n  paths[\"/api/public/dataset-items\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseDatasetRunParams = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}/runs/{runName}\"][\"get\"][\"parameters\"][\"path\"]\n>;\nexport type GetLangfuseDatasetRunResponse = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}/runs/{runName}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type GetLangfuseDatasetRunsQuery =\n  paths[\"/api/public/datasets/{datasetName}/runs\"][\"get\"][\"parameters\"][\"query\"];\nexport type GetLangfuseDatasetRunsPath = paths[\"/api/public/datasets/{datasetName}/runs\"][\"get\"][\"parameters\"][\"path\"];\n\nexport type GetLangfuseDatasetRunsResponse = FixTypes<\n  paths[\"/api/public/datasets/{datasetName}/runs\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfusePromptBody = FixTypes<\n  paths[\"/api/public/v2/prompts\"][\"post\"][\"requestBody\"][\"content\"][\"application/json\"]\n>;\nexport type CreateLangfusePromptResponse =\n  paths[\"/api/public/v2/prompts\"][\"post\"][\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport type GetLangfusePromptSuccessData =\n  paths[\"/api/public/v2/prompts/{promptName}\"][\"get\"][\"responses\"][\"200\"][\"content\"][\"application/json\"];\n\nexport type GetLangfusePromptFailureData = { message?: string };\nexport type GetLangfusePromptResponse =\n  | {\n      fetchResult: \"success\";\n      data: GetLangfusePromptSuccessData;\n    }\n  | { fetchResult: \"failure\"; data: GetLangfusePromptFailureData };\n\nexport type ChatMessage = FixTypes<components[\"schemas\"][\"ChatMessage\"]>;\nexport type ChatPrompt = FixTypes<components[\"schemas\"][\"ChatPrompt\"]> & { type: \"chat\" };\nexport type TextPrompt = FixTypes<components[\"schemas\"][\"TextPrompt\"]> & { type: \"text\" };\n\ntype CreateTextPromptRequest = FixTypes<components[\"schemas\"][\"CreateTextPromptRequest\"]>;\ntype CreateChatPromptRequest = FixTypes<components[\"schemas\"][\"CreateChatPromptRequest\"]>;\nexport type CreateTextPromptBody = { type?: \"text\" } & Omit<CreateTextPromptRequest, \"type\"> & { isActive?: boolean }; // isActive is optional for backward compatibility\nexport type CreateChatPromptBody = { type: \"chat\" } & Omit<CreateChatPromptRequest, \"type\"> & { isActive?: boolean }; // isActive is optional for backward compatibility\n\nexport type CreatePromptBody = CreateTextPromptBody | CreateChatPromptBody;\n\nexport type PromptInput = {\n  prompt?: LangfusePromptRecord | LangfusePromptClient;\n};\n\nexport type JsonType = string | number | boolean | null | { [key: string]: JsonType } | Array<JsonType>;\n\ntype OptionalTypes<T> = T extends null | undefined ? T : never;\n\ntype FixTypes<T> = T extends undefined\n  ? undefined\n  : Omit<\n      {\n        [P in keyof T]: P extends\n          | \"startTime\"\n          | \"endTime\"\n          | \"timestamp\"\n          | \"completionStartTime\"\n          | \"createdAt\"\n          | \"updatedAt\"\n          | \"fromTimestamp\"\n          | \"toTimestamp\"\n          | \"fromStartTime\"\n          | \"toStartTime\"\n          ? // Dates instead of strings\n            Date | OptionalTypes<T[P]>\n          : P extends \"metadata\" | \"input\" | \"output\" | \"completion\" | \"expectedOutput\"\n            ? // JSON instead of strings\n              any | OptionalTypes<T[P]>\n            : T[P];\n      },\n      \"externalId\" | \"traceIdType\"\n    >;\n\nexport type DeferRuntime = {\n  langfuseTraces: (\n    traces: {\n      id: string;\n      name: string;\n      url: string;\n    }[]\n  ) => void;\n};\n\n// Datasets\nexport type DatasetItemData = GetLangfuseDatasetItemsResponse[\"data\"][number];\nexport type LinkDatasetItem = (\n  obj: LangfuseObjectClient,\n  runName: string,\n  runArgs?: {\n    description?: string;\n    metadata?: any;\n  }\n) => Promise<{ id: string }>;\nexport type DatasetItem = DatasetItemData & { link: LinkDatasetItem };\n\nexport type MaskFunction = (params: { data: any }) => any;\n\nexport type LangfusePromptRecord = (TextPrompt | ChatPrompt) & { isFallback: boolean };\n","import { type LangfuseCoreOptions } from \"./types\";\n\nexport function assert(truthyValue: any, message: string): void {\n  if (!truthyValue) {\n    throw new Error(message);\n  }\n}\n\nexport function removeTrailingSlash(url: string): string {\n  return url?.replace(/\\/+$/, \"\");\n}\n\nexport interface RetriableOptions {\n  retryCount?: number;\n  retryDelay?: number;\n  retryCheck?: (err: any) => boolean;\n}\n\nexport async function retriable<T>(\n  fn: () => Promise<T>,\n  props: RetriableOptions = {},\n  log: (msg: string) => void\n): Promise<T> {\n  const { retryCount = 3, retryDelay = 5000, retryCheck = () => true } = props;\n  let lastError = null;\n\n  for (let i = 0; i < retryCount + 1; i++) {\n    if (i > 0) {\n      // don't wait when it's the first try\n      await new Promise((resolve) => setTimeout(resolve, retryDelay));\n      log(`Retrying ${i + 1} of ${retryCount + 1}`);\n    }\n\n    try {\n      const res = await fn();\n      return res;\n    } catch (e) {\n      lastError = e;\n      if (!retryCheck(e)) {\n        throw e;\n      }\n      log(`Retriable error: ${JSON.stringify(e)}`);\n    }\n  }\n\n  throw lastError;\n}\n\n// https://stackoverflow.com/a/8809472\nexport function generateUUID(globalThis?: any): string {\n  // Public Domain/MIT\n  let d = new Date().getTime(); //Timestamp\n  let d2 =\n    (globalThis && globalThis.performance && globalThis.performance.now && globalThis.performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\nexport function currentTimestamp(): number {\n  return new Date().getTime();\n}\n\nexport function currentISOTime(): string {\n  return new Date().toISOString();\n}\n\nexport function safeSetTimeout(fn: () => void, timeout: number): any {\n  // NOTE: we use this so rarely that it is totally fine to do `safeSetTimeout(fn, 0)``\n  // rather than setImmediate.\n  const t = setTimeout(fn, timeout) as any;\n  // We unref if available to prevent Node.js hanging on exit\n  t?.unref && t?.unref();\n  return t;\n}\n\nexport function getEnv<T = string>(key: string): T | undefined {\n  if (typeof process !== \"undefined\" && process.env[key]) {\n    return process.env[key] as T;\n  } else if (typeof globalThis !== \"undefined\") {\n    return (globalThis as any)[key];\n  }\n  return;\n}\n\nexport function configLangfuseSDK(params?: LangfuseCoreOptions, secretRequired: boolean = true): LangfuseCoreOptions {\n  const { publicKey, secretKey, ...coreOptions } = params ?? {};\n\n  // check environment variables if values not provided\n  const finalPublicKey = publicKey ?? getEnv(\"LANGFUSE_PUBLIC_KEY\");\n  const finalSecretKey = secretRequired ? secretKey ?? getEnv(\"LANGFUSE_SECRET_KEY\") : undefined;\n  const finalBaseUrl = coreOptions.baseUrl ?? getEnv(\"LANGFUSE_BASEURL\");\n\n  const finalCoreOptions = {\n    ...coreOptions,\n    baseUrl: finalBaseUrl,\n  };\n\n  return {\n    publicKey: finalPublicKey,\n    ...(secretRequired ? { secretKey: finalSecretKey } : undefined),\n    ...finalCoreOptions,\n  };\n}\n\nexport const encodeQueryParams = (params?: { [key: string]: any }): string => {\n  const queryParams = new URLSearchParams();\n  Object.entries(params ?? {}).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      // check for date\n      if (value instanceof Date) {\n        queryParams.append(key, value.toISOString());\n      } else {\n        queryParams.append(key, value.toString());\n      }\n    }\n  });\n  return queryParams.toString();\n};\n","export class SimpleEventEmitter {\n  events: { [key: string]: ((...args: any[]) => void)[] } = {};\n\n  constructor() {\n    this.events = {};\n  }\n\n  on(event: string, listener: (...args: any[]) => void): () => void {\n    if (!this.events[event]) {\n      this.events[event] = [];\n    }\n    this.events[event].push(listener);\n\n    return () => {\n      this.events[event] = this.events[event].filter((x) => x !== listener);\n    };\n  }\n\n  emit(event: string, payload: any): void {\n    for (const listener of this.events[event] || []) {\n      listener(payload);\n    }\n    for (const listener of this.events[\"*\"] || []) {\n      listener(event, payload);\n    }\n  }\n}\n","import { getEnv } from \"./utils\";\n\nconst common_release_envs = [\n  // Vercel\n  \"VERCEL_GIT_COMMIT_SHA\",\n  \"NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA\",\n  // Netlify\n  \"COMMIT_REF\",\n  // Render\n  \"RENDER_GIT_COMMIT\",\n  // GitLab CI\n  \"CI_COMMIT_SHA\",\n  // CicleCI\n  \"CIRCLE_SHA1\",\n  // Cloudflare pages\n  \"CF_PAGES_COMMIT_SHA\",\n  // AWS Amplify\n  \"REACT_APP_GIT_SHA\",\n  // Heroku\n  \"SOURCE_VERSION\",\n] as const;\n\nexport function getCommonReleaseEnvs(): string | undefined {\n  for (const key of common_release_envs) {\n    const value = getEnv(key);\n    if (value) {\n      return value;\n    }\n  }\n  return undefined;\n}\n","import mustache from \"mustache\";\n\nimport type { ChatMessage, ChatPrompt, CreateLangfusePromptResponse, TextPrompt } from \"../types\";\n\nmustache.escape = function (text) {\n  return text;\n};\n\nabstract class BasePromptClient {\n  public readonly name: string;\n  public readonly version: number;\n  public readonly config: unknown;\n  public readonly labels: string[];\n  public readonly tags: string[];\n  public readonly isFallback: boolean;\n  public readonly type: \"text\" | \"chat\";\n  public readonly prompt: string | ChatMessage[];\n\n  constructor(prompt: CreateLangfusePromptResponse, isFallback = false, type: \"text\" | \"chat\") {\n    this.name = prompt.name;\n    this.version = prompt.version;\n    this.config = prompt.config;\n    this.labels = prompt.labels;\n    this.tags = prompt.tags;\n    this.isFallback = isFallback;\n    this.type = type;\n    this.prompt = prompt.prompt;\n  }\n\n  abstract compile(variables?: Record<string, string>): string | ChatMessage[];\n\n  public abstract getLangchainPrompt(): string | ChatMessage[];\n\n  protected _transformToLangchainVariables(content: string): string {\n    return content.replace(/\\{\\{(.*?)\\}\\}/g, \"{$1}\");\n  }\n\n  public toJSON(): string {\n    return JSON.stringify({\n      name: this.name,\n      prompt: this.prompt,\n      version: this.version,\n      isFallback: this.isFallback,\n      tags: this.tags,\n      labels: this.labels,\n      type: this.type,\n      config: this.config,\n    });\n  }\n}\n\nexport class TextPromptClient extends BasePromptClient {\n  public readonly promptResponse: TextPrompt;\n  public readonly prompt: string;\n\n  constructor(prompt: TextPrompt, isFallback = false) {\n    super(prompt, isFallback, \"text\");\n    this.promptResponse = prompt;\n    this.prompt = prompt.prompt;\n  }\n\n  compile(variables?: Record<string, string>): string {\n    return mustache.render(this.promptResponse.prompt, variables ?? {});\n  }\n\n  public getLangchainPrompt(): string {\n    /**\n     * Converts Langfuse prompt into string compatible with Langchain PromptTemplate.\n     *\n     * It specifically adapts the mustache-style double curly braces {{variable}} used in Langfuse\n     * to the single curly brace {variable} format expected by Langchain.\n     *\n     * @returns {string} The string that can be plugged into Langchain's PromptTemplate.\n     */\n    return this._transformToLangchainVariables(this.prompt);\n  }\n}\n\nexport class ChatPromptClient extends BasePromptClient {\n  public readonly promptResponse: ChatPrompt;\n  public readonly prompt: ChatMessage[];\n\n  constructor(prompt: ChatPrompt, isFallback = false) {\n    super(prompt, isFallback, \"chat\");\n    this.promptResponse = prompt;\n    this.prompt = prompt.prompt;\n  }\n\n  compile(variables?: Record<string, string>): ChatMessage[] {\n    return this.prompt.map<ChatMessage>((chatMessage) => ({\n      ...chatMessage,\n      content: mustache.render(chatMessage.content, variables ?? {}),\n    }));\n  }\n\n  public getLangchainPrompt(): ChatMessage[] {\n    /**\n     * Converts Langfuse prompt into string compatible with Langchain PromptTemplate.\n     *\n     * It specifically adapts the mustache-style double curly braces {{variable}} used in Langfuse\n     * to the single curly brace {variable} format expected by Langchain.\n     * Example usage:\n     *\n     * ```\n     * import { ChatPromptTemplate } from \"@langchain/core/prompts\";\n     *\n     * const langchainChatPrompt = ChatPromptTemplate.fromMessages(\n     *    langfuseChatPrompt.getLangchainPrompt().map((m) => [m.role, m.content])\n     *  );\n     *\n     * const formattedPrompt = await langchainPrompt.format(values);\n     *\n     * ```\n     * @returns {ChatMessage[]} Chat messages with variables that can be plugged into Langchain's ChatPromptTemplate.\n     */\n    return this.prompt.map((chatMessage) => ({\n      ...chatMessage,\n      content: this._transformToLangchainVariables(chatMessage.content),\n    }));\n  }\n}\n\nexport type LangfusePromptClient = TextPromptClient | ChatPromptClient;\n","import type { LangfusePromptClient } from \"./promptClients\";\n\nexport const DEFAULT_PROMPT_CACHE_TTL_SECONDS = 60;\n\nclass LangfusePromptCacheItem {\n  private _expiry: number;\n\n  constructor(\n    public value: LangfusePromptClient,\n    ttlSeconds: number\n  ) {\n    this._expiry = Date.now() + ttlSeconds * 1000;\n  }\n\n  get isExpired(): boolean {\n    return Date.now() > this._expiry;\n  }\n}\nexport class LangfusePromptCache {\n  private _cache: Map<string, LangfusePromptCacheItem>;\n  private _defaultTtlSeconds: number;\n  private _refreshingKeys: Map<string, Promise<void>>;\n\n  constructor() {\n    this._cache = new Map<string, LangfusePromptCacheItem>();\n    this._defaultTtlSeconds = DEFAULT_PROMPT_CACHE_TTL_SECONDS;\n    this._refreshingKeys = new Map<string, Promise<void>>();\n  }\n\n  public getIncludingExpired(key: string): LangfusePromptCacheItem | null {\n    return this._cache.get(key) ?? null;\n  }\n\n  public set(key: string, value: LangfusePromptClient, ttlSeconds?: number): void {\n    const effectiveTtlSeconds = ttlSeconds ?? this._defaultTtlSeconds;\n    this._cache.set(key, new LangfusePromptCacheItem(value, effectiveTtlSeconds));\n  }\n\n  public addRefreshingPromise(key: string, promise: Promise<any>): void {\n    this._refreshingKeys.set(key, promise);\n    promise\n      .then(() => {\n        this._refreshingKeys.delete(key);\n      })\n      .catch(() => {\n        this._refreshingKeys.delete(key);\n      });\n  }\n\n  public isRefreshing(key: string): boolean {\n    return this._refreshingKeys.has(key);\n  }\n}\n","import { type LangfusePersistedProperty } from \"./types\";\n\nexport class LangfuseMemoryStorage {\n  private _memoryStorage: { [key: string]: any | undefined } = {};\n\n  getProperty(key: LangfusePersistedProperty): any | undefined {\n    return this._memoryStorage[key];\n  }\n\n  setProperty(key: LangfusePersistedProperty, value: any | null): void {\n    this._memoryStorage[key] = value !== null ? value : undefined;\n  }\n}\n","import {\n  type LangfuseFetchOptions,\n  type LangfuseFetchResponse,\n  type LangfuseQueueItem,\n  type LangfuseCoreOptions,\n  LangfusePersistedProperty,\n  type CreateLangfuseTraceBody,\n  type LangfuseObject,\n  type CreateLangfuseEventBody,\n  type CreateLangfuseSpanBody,\n  type CreateLangfuseGenerationBody,\n  type CreateLangfuseScoreBody,\n  type UpdateLangfuseSpanBody,\n  type UpdateLangfuseGenerationBody,\n  type GetLangfuseDatasetParams,\n  type GetLangfuseDatasetResponse,\n  type CreateLangfuseDatasetRunItemBody,\n  type CreateLangfuseDatasetRunItemResponse,\n  type CreateLangfuseDatasetBody,\n  type CreateLangfuseDatasetResponse,\n  type CreateLangfuseDatasetItemBody,\n  type CreateLangfuseDatasetItemResponse,\n  type GetLangfuseDatasetRunResponse,\n  type GetLangfuseDatasetRunParams,\n  type DeferRuntime,\n  type IngestionReturnType,\n  type SingleIngestionEvent,\n  type CreateLangfusePromptResponse,\n  type CreateLangfusePromptBody,\n  type GetLangfusePromptResponse,\n  type PromptInput,\n  type CreatePromptBody,\n  type CreateChatPromptBody,\n  type CreateTextPromptBody,\n  type GetLangfuseDatasetItemsQuery,\n  type GetLangfuseDatasetItemsResponse,\n  type GetLangfuseDatasetRunsQuery,\n  type GetLangfuseDatasetRunsResponse,\n  type GetLangfuseTracesQuery,\n  type GetLangfuseTracesResponse,\n  type GetLangfuseObservationsQuery,\n  type GetLangfuseObservationsResponse,\n  type GetLangfuseObservationResponse,\n  type GetLangfuseTraceResponse,\n  type ChatMessage,\n  type GetLangfuseSessionsQuery,\n  type GetLangfuseSessionsResponse,\n  type EventBody,\n  type DatasetItem,\n  type MaskFunction,\n} from \"./types\";\nimport {\n  generateUUID,\n  removeTrailingSlash,\n  retriable,\n  type RetriableOptions,\n  safeSetTimeout,\n  getEnv,\n  currentISOTime,\n  encodeQueryParams,\n} from \"./utils\";\n\nexport * as utils from \"./utils\";\nimport { SimpleEventEmitter } from \"./eventemitter\";\nimport { getCommonReleaseEnvs } from \"./release-env\";\nimport { ChatPromptClient, TextPromptClient, type LangfusePromptClient } from \"./prompts/promptClients\";\nimport { LangfusePromptCache } from \"./prompts/promptCache\";\nexport { LangfuseMemoryStorage } from \"./storage-memory\";\nexport type { LangfusePromptRecord } from \"./types\";\nexport type IngestionBody = SingleIngestionEvent[\"body\"];\nexport * from \"./prompts/promptClients\";\n\nconst MAX_EVENT_SIZE = 1_000_000;\n\nclass LangfuseFetchHttpError extends Error {\n  name = \"LangfuseFetchHttpError\";\n  body: string | undefined;\n\n  constructor(\n    public response: LangfuseFetchResponse,\n    body: string\n  ) {\n    super(\"HTTP error while fetching Langfuse: \" + response.status + \" and body: \" + body);\n  }\n}\n\nclass LangfuseFetchNetworkError extends Error {\n  name = \"LangfuseFetchNetworkError\";\n\n  constructor(public error: unknown) {\n    super(\"Network error while fetching Langfuse\", error instanceof Error ? { cause: error } : {});\n  }\n}\n\nfunction isLangfuseFetchHttpError(error: any): error is LangfuseFetchHttpError {\n  return typeof error === \"object\" && error.name === \"LangfuseFetchHttpError\";\n}\n\nfunction isLangfuseFetchNetworkError(error: any): error is LangfuseFetchNetworkError {\n  return typeof error === \"object\" && error.name === \"LangfuseFetchNetworkError\";\n}\n\nfunction isLangfuseFetchError(err: any): boolean {\n  return isLangfuseFetchHttpError(err) || isLangfuseFetchNetworkError(err);\n}\n\n// Constants for URLs\nconst SUPPORT_URL = \"https://langfuse.com/support\";\nconst API_DOCS_URL = \"https://api.reference.langfuse.com\";\nconst RBAC_DOCS_URL = \"https://langfuse.com/docs/rbac\";\nconst INSTALLATION_DOCS_URL = \"https://langfuse.com/docs/sdk/typescript/guide\";\nconst RATE_LIMITS_URL = \"https://langfuse.com/faq/all/api-limits\";\nconst NPM_PACKAGE_URL = \"https://www.npmjs.com/package/langfuse\";\n\n// Error messages\nconst updatePromptResponse = `Make sure to keep your SDK updated, refer to ${NPM_PACKAGE_URL} for details.`;\nconst defaultServerErrorPrompt = `This is an unusual occurrence and we are monitoring it closely. For help, please contact support: ${SUPPORT_URL}.`;\nconst defaultErrorResponse = `Unexpected error occurred. Please check your request and contact support: ${SUPPORT_URL}.`;\n\n// Error response map\nconst errorResponseByCode = new Map<number, string>([\n  // Internal error category: 5xx errors, 404 error\n  [500, `Internal server error occurred. For help, please contact support: ${SUPPORT_URL}`],\n  [501, `Not implemented. Please check your request and contact support for help: ${SUPPORT_URL}.`],\n  [502, `Bad gateway. ${defaultServerErrorPrompt}`],\n  [503, `Service unavailable. ${defaultServerErrorPrompt}`],\n  [504, `Gateway timeout. ${defaultServerErrorPrompt}`],\n  [404, `Internal error occurred. ${defaultServerErrorPrompt}`],\n\n  // Client error category: 4xx errors, excluding 404\n  [\n    400,\n    `Bad request. Please check your request for any missing or incorrect parameters. Refer to our API docs: ${API_DOCS_URL} for details.`,\n  ],\n  [\n    401,\n    `Unauthorized. Please check your public/private host settings. Refer to our installation and setup guide: ${INSTALLATION_DOCS_URL} for details on SDK configuration.`,\n  ],\n  [403, `Forbidden. Please check your access control settings. Refer to our RBAC docs: ${RBAC_DOCS_URL} for details.`],\n  [429, `Rate limit exceeded. For more information on rate limits please see: ${RATE_LIMITS_URL}`],\n]);\n\n// Returns a user-friendly error message based on the HTTP status code\nfunction getErrorResponseByCode(code: number | undefined): string {\n  if (!code) {\n    return `${defaultErrorResponse} ${updatePromptResponse}`;\n  }\n\n  const errorResponse = errorResponseByCode.get(code) || defaultErrorResponse;\n  return `${code}: ${errorResponse} ${updatePromptResponse}`;\n}\n\nfunction logIngestionError(error: any): void {\n  if (isLangfuseFetchHttpError(error)) {\n    const code = error.response.status;\n    const errorResponse = getErrorResponseByCode(code);\n    console.error(\"[Langfuse SDK]\", errorResponse, `Error details: ${error}`);\n  } else if (isLangfuseFetchNetworkError(error)) {\n    console.error(\"[Langfuse SDK] Network error: \", error);\n  } else {\n    console.error(\"[Langfuse SDK] Unknown error:\", error);\n  }\n}\n\nabstract class LangfuseCoreStateless {\n  // options\n  private secretKey: string | undefined;\n  private publicKey: string;\n  baseUrl: string;\n  private flushAt: number;\n  private flushInterval: number;\n  private requestTimeout: number;\n  private removeDebugCallback?: () => void;\n  private debugMode: boolean = false;\n  private pendingPromises: Record<string, Promise<any>> = {};\n  private release: string | undefined;\n  private sdkIntegration: string;\n  private enabled: boolean;\n  private mask: MaskFunction | undefined;\n\n  // internal\n  protected _events = new SimpleEventEmitter();\n  protected _flushTimer?: any;\n  protected _retryOptions: RetriableOptions;\n\n  // Abstract methods to be overridden by implementations\n  abstract fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;\n  abstract getLibraryId(): string;\n  abstract getLibraryVersion(): string;\n\n  // This is our abstracted storage. Each implementation should handle its own\n  abstract getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;\n  abstract setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;\n\n  constructor(params: LangfuseCoreOptions) {\n    const { publicKey, secretKey, enabled, ...options } = params;\n\n    this.enabled = enabled === false ? false : true;\n    this.publicKey = publicKey ?? \"\";\n    this.secretKey = secretKey;\n    this.baseUrl = removeTrailingSlash(options?.baseUrl || \"https://cloud.langfuse.com\");\n    this.flushAt = options?.flushAt ? Math.max(options?.flushAt, 1) : 15;\n    this.flushInterval = options?.flushInterval ?? 10000;\n    this.release = options?.release ?? getEnv(\"LANGFUSE_RELEASE\") ?? getCommonReleaseEnvs() ?? undefined;\n    this.mask = options?.mask;\n\n    this._retryOptions = {\n      retryCount: options?.fetchRetryCount ?? 3,\n      retryDelay: options?.fetchRetryDelay ?? 3000,\n      retryCheck: isLangfuseFetchError,\n    };\n    this.requestTimeout = options?.requestTimeout ?? 10000; // 10 seconds\n\n    this.sdkIntegration = options?.sdkIntegration ?? \"DEFAULT\";\n  }\n\n  getSdkIntegration(): string {\n    return this.sdkIntegration;\n  }\n\n  protected getCommonEventProperties(): any {\n    return {\n      $lib: this.getLibraryId(),\n      $lib_version: this.getLibraryVersion(),\n    };\n  }\n\n  on(event: string, cb: (...args: any[]) => void): () => void {\n    return this._events.on(event, cb);\n  }\n\n  debug(enabled: boolean = true): void {\n    this.removeDebugCallback?.();\n\n    this.debugMode = enabled;\n\n    if (enabled) {\n      this.removeDebugCallback = this.on(\"*\", (event, payload) =>\n        console.log(\"Langfuse Debug\", event, JSON.stringify(payload))\n      );\n    }\n  }\n\n  /***\n   *** Handlers for each object type\n   ***/\n  protected traceStateless(body: CreateLangfuseTraceBody): string {\n    const { id: bodyId, timestamp: bodyTimestamp, release: bodyRelease, ...rest } = body;\n\n    const id = bodyId ?? generateUUID();\n    const release = bodyRelease ?? this.release;\n\n    const parsedBody: CreateLangfuseTraceBody = {\n      id,\n      release,\n      timestamp: bodyTimestamp ?? new Date(),\n      ...rest,\n    };\n    this.enqueue(\"trace-create\", parsedBody);\n    return id;\n  }\n\n  protected eventStateless(body: CreateLangfuseEventBody): string {\n    const { id: bodyId, startTime: bodyStartTime, ...rest } = body;\n\n    const id = bodyId ?? generateUUID();\n\n    const parsedBody: CreateLangfuseEventBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...rest,\n    };\n    this.enqueue(\"event-create\", parsedBody);\n    return id;\n  }\n\n  protected spanStateless(body: CreateLangfuseSpanBody): string {\n    const { id: bodyId, startTime: bodyStartTime, ...rest } = body;\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseSpanBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...rest,\n    };\n    this.enqueue(\"span-create\", parsedBody);\n    return id;\n  }\n\n  protected generationStateless(\n    body: Omit<CreateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): string {\n    const { id: bodyId, startTime: bodyStartTime, prompt, ...rest } = body;\n    const promptDetails =\n      prompt && !prompt.isFallback ? { promptName: prompt.name, promptVersion: prompt.version } : {};\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseGenerationBody = {\n      id,\n      startTime: bodyStartTime ?? new Date(),\n      ...promptDetails,\n      ...rest,\n    };\n\n    this.enqueue(\"generation-create\", parsedBody);\n    return id;\n  }\n\n  protected scoreStateless(body: CreateLangfuseScoreBody): string {\n    const { id: bodyId, ...rest } = body;\n\n    const id = bodyId || generateUUID();\n\n    const parsedBody: CreateLangfuseScoreBody = {\n      id,\n      ...rest,\n    };\n    this.enqueue(\"score-create\", parsedBody);\n    return id;\n  }\n\n  protected updateSpanStateless(body: UpdateLangfuseSpanBody): string {\n    this.enqueue(\"span-update\", body);\n    return body.id;\n  }\n\n  protected updateGenerationStateless(\n    body: Omit<UpdateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): string {\n    const { prompt, ...rest } = body;\n    const promptDetails =\n      prompt && !prompt.isFallback ? { promptName: prompt.name, promptVersion: prompt.version } : {};\n\n    const parsedBody: UpdateLangfuseGenerationBody = {\n      ...promptDetails,\n      ...rest,\n    };\n    this.enqueue(\"generation-update\", parsedBody);\n    return body.id;\n  }\n\n  protected async _getDataset(name: GetLangfuseDatasetParams[\"datasetName\"]): Promise<GetLangfuseDatasetResponse> {\n    const encodedName = encodeURIComponent(name);\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/v2/datasets/${encodedName}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n  }\n\n  protected async _getDatasetItems(query: GetLangfuseDatasetItemsQuery): Promise<GetLangfuseDatasetItemsResponse> {\n    const params = new URLSearchParams();\n    Object.entries(query ?? {}).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        params.append(key, value.toString());\n      }\n    });\n\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/dataset-items?${params}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n  }\n\n  async fetchTraces(query?: GetLangfuseTracesQuery): Promise<GetLangfuseTracesResponse> {\n    // destructure the response into data and meta to be explicit about the shape of the response and add type-warnings in case the API changes\n    const { data, meta } = await this.fetchAndLogErrors<GetLangfuseTracesResponse>(\n      `${this.baseUrl}/api/public/traces?${encodeQueryParams(query)}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n    return { data, meta };\n  }\n\n  async fetchTrace(traceId: string): Promise<{ data: GetLangfuseTraceResponse }> {\n    const res = await this.fetchAndLogErrors<GetLangfuseTraceResponse>(\n      `${this.baseUrl}/api/public/traces/${traceId}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n    return { data: res };\n  }\n\n  async fetchObservations(query?: GetLangfuseObservationsQuery): Promise<GetLangfuseObservationsResponse> {\n    // destructure the response into data and meta to be explicit about the shape of the response and add type-warnings in case the API changes\n    const { data, meta } = await this.fetchAndLogErrors<GetLangfuseObservationsResponse>(\n      `${this.baseUrl}/api/public/observations?${encodeQueryParams(query)}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n\n    return { data, meta };\n  }\n\n  async fetchObservation(observationId: string): Promise<{ data: GetLangfuseObservationResponse }> {\n    const res = await this.fetchAndLogErrors<GetLangfuseObservationResponse>(\n      `${this.baseUrl}/api/public/observations/${observationId}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n\n    return { data: res };\n  }\n\n  async fetchSessions(query?: GetLangfuseSessionsQuery): Promise<GetLangfuseSessionsResponse> {\n    // destructure the response into data and meta to be explicit about the shape of the response and add type-warnings in case the API changes\n    const { data, meta } = await this.fetchAndLogErrors<GetLangfuseSessionsResponse>(\n      `${this.baseUrl}/api/public/sessions?${encodeQueryParams(query)}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n\n    return { data, meta };\n  }\n\n  async getDatasetRun(params: GetLangfuseDatasetRunParams): Promise<GetLangfuseDatasetRunResponse> {\n    const encodedDatasetName = encodeURIComponent(params.datasetName);\n    const encodedRunName = encodeURIComponent(params.runName);\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/datasets/${encodedDatasetName}/runs/${encodedRunName}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n  }\n\n  async getDatasetRuns(\n    datasetName: string,\n    query?: GetLangfuseDatasetRunsQuery\n  ): Promise<GetLangfuseDatasetRunsResponse> {\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/datasets/${encodeURIComponent(datasetName)}/runs?${encodeQueryParams(query)}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n  }\n\n  async createDatasetRunItem(body: CreateLangfuseDatasetRunItemBody): Promise<CreateLangfuseDatasetRunItemResponse> {\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/dataset-run-items`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    );\n  }\n\n  /**\n   * Creates a dataset. Upserts the dataset if it already exists.\n   *\n   * @param dataset Can be either a string (name) or an object with name, description and metadata\n   * @returns A promise that resolves to the response of the create operation.\n   */\n  async createDataset(\n    dataset:\n      | string // name\n      | {\n          name: string;\n          description?: string;\n          metadata?: any;\n        }\n  ): Promise<CreateLangfuseDatasetResponse> {\n    const body: CreateLangfuseDatasetBody = typeof dataset === \"string\" ? { name: dataset } : dataset;\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/datasets`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    );\n  }\n\n  /**\n   * Creates a dataset item. Upserts the item if it already exists.\n   * @param body The body of the dataset item to be created.\n   * @returns A promise that resolves to the response of the create operation.\n   */\n  async createDatasetItem(body: CreateLangfuseDatasetItemBody): Promise<CreateLangfuseDatasetItemResponse> {\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/dataset-items`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    );\n  }\n\n  async getDatasetItem(id: string): Promise<CreateLangfuseDatasetItemResponse> {\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/dataset-items/${id}`,\n      this._getFetchOptions({ method: \"GET\" })\n    );\n  }\n\n  protected _parsePayload(response: any): any {\n    try {\n      return JSON.parse(response);\n    } catch {\n      return response;\n    }\n  }\n\n  async createPromptStateless(body: CreateLangfusePromptBody): Promise<CreateLangfusePromptResponse> {\n    return this.fetchAndLogErrors(\n      `${this.baseUrl}/api/public/v2/prompts`,\n      this._getFetchOptions({ method: \"POST\", body: JSON.stringify(body) })\n    );\n  }\n\n  async getPromptStateless(\n    name: string,\n    version?: number,\n    label?: string,\n    maxRetries?: number,\n    requestTimeout?: number // this will override the default requestTimeout for fetching prompts. Together with maxRetries, it can be used to fetch prompts fast when the first fetch is slow.\n  ): Promise<GetLangfusePromptResponse> {\n    const encodedName = encodeURIComponent(name);\n    const params = new URLSearchParams();\n\n    // Add parameters only if they are provided\n    if (version && label) {\n      throw new Error(\"Provide either version or label, not both.\");\n    }\n\n    if (version) {\n      params.append(\"version\", version.toString());\n    }\n\n    if (label) {\n      params.append(\"label\", label);\n    }\n\n    const url = `${this.baseUrl}/api/public/v2/prompts/${encodedName}${params.size ? \"?\" + params : \"\"}`;\n\n    const boundedMaxRetries = this._getBoundedMaxRetries({ maxRetries, defaultMaxRetries: 2, maxRetriesUpperBound: 4 });\n    const retryOptions = { ...this._retryOptions, retryCount: boundedMaxRetries, retryDelay: 500 };\n    const retryLogger = (string: string): void =>\n      this._events.emit(\"retry\", string + \", \" + url + \", \" + JSON.stringify(retryOptions));\n\n    return retriable(\n      async () => {\n        const res = await this.fetch(url, this._getFetchOptions({ method: \"GET\", fetchTimeout: requestTimeout })).catch(\n          (e) => {\n            if (e.name === \"AbortError\") {\n              throw new LangfuseFetchNetworkError(\"Fetch request timed out\");\n            }\n            throw new LangfuseFetchNetworkError(e);\n          }\n        );\n\n        const data = await res.json();\n\n        if (res.status >= 500) {\n          throw new LangfuseFetchHttpError(res, JSON.stringify(data));\n        }\n\n        return { fetchResult: res.status === 200 ? \"success\" : \"failure\", data };\n      },\n      retryOptions,\n      retryLogger\n    );\n  }\n\n  private _getBoundedMaxRetries(params: {\n    maxRetries?: number;\n    defaultMaxRetries?: number;\n    maxRetriesUpperBound?: number;\n  }): number {\n    const defaultMaxRetries = Math.max(params.defaultMaxRetries ?? 2, 0);\n    const maxRetriesUpperBound = Math.max(params.maxRetriesUpperBound ?? 4, 0);\n\n    if (params.maxRetries === undefined) {\n      return defaultMaxRetries;\n    }\n\n    return Math.min(Math.max(params.maxRetries, 0), maxRetriesUpperBound);\n  }\n\n  /***\n   *** QUEUEING AND FLUSHING\n   ***/\n  protected enqueue(type: LangfuseObject, body: EventBody): void {\n    try {\n      if (!this.enabled) {\n        return;\n      }\n\n      this.maskEventBodyInPlace(body);\n      const finalEventBody = this.truncateEventBody(body, MAX_EVENT_SIZE);\n\n      try {\n        JSON.stringify(finalEventBody);\n      } catch (e) {\n        console.error(`[Langfuse SDK] Event Body for ${type} is not JSON-serializable: ${e}`);\n        this._events.emit(\"error\", `Event Body for ${type} is not JSON-serializable: ${e}`);\n\n        return;\n      }\n\n      const queue = this.getPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue) || [];\n\n      queue.push({\n        id: generateUUID(),\n        type,\n        timestamp: currentISOTime(),\n        body: finalEventBody as any, // TODO: fix typecast. EventBody is not correctly narrowed to the correct type dictated by the 'type' property. This should be part of a larger type cleanup.\n        metadata: undefined,\n      });\n      this.setPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue, queue);\n\n      this._events.emit(type, finalEventBody);\n\n      // Flush queued events if we meet the flushAt length\n      if (queue.length >= this.flushAt) {\n        this.flush();\n      }\n\n      if (this.flushInterval && !this._flushTimer) {\n        this._flushTimer = safeSetTimeout(() => this.flush(), this.flushInterval);\n      }\n    } catch (e) {\n      this._events.emit(\"error\", e);\n    }\n  }\n\n  private maskEventBodyInPlace(body: EventBody): void {\n    if (!this.mask) {\n      return;\n    }\n\n    const maskableKeys = [\"input\", \"output\"] as const;\n\n    for (const key of maskableKeys) {\n      if (key in body) {\n        try {\n          body[key as keyof EventBody] = this.mask({ data: body[key as keyof EventBody] });\n        } catch (e) {\n          this._events.emit(\"error\", `Error masking ${key}: ${e}`);\n          body[key as keyof EventBody] = \"<fully masked due to failed mask function>\";\n        }\n      }\n    }\n  }\n\n  /**\n   * Truncates the event body if its byte size exceeds the specified maximum byte size.\n   * Emits a warning event if truncation occurs.\n   * The fields that may be truncated are: \"input\", \"output\", and \"metadata\".\n   * The fields are truncated in the order of their size, from largest to smallest until the total byte size is within the limit.\n   */\n  protected truncateEventBody(body: EventBody, maxByteSize: number): EventBody {\n    const bodySize = this.getByteSize(body);\n\n    if (bodySize <= maxByteSize) {\n      return body;\n    }\n\n    this._events.emit(\"warning\", `Event Body is too large (${bodySize} bytes) and will be truncated`);\n\n    // Sort keys by size and truncate the largest keys first\n    const keysToCheck = [\"input\", \"output\", \"metadata\"] as const;\n    const keySizes = keysToCheck\n      .map((key) => ({ key, size: key in body ? this.getByteSize(body[key as keyof typeof body]) : 0 }))\n      .sort((a, b) => b.size - a.size);\n\n    let result = { ...body };\n    let currentSize = bodySize;\n\n    for (const { key, size } of keySizes) {\n      if (currentSize > maxByteSize && Object.prototype.hasOwnProperty.call(result, key)) {\n        result = { ...result, [key]: \"<truncated due to size exceeding limit>\" };\n\n        this._events.emit(\"warning\", `Truncated ${key} due to total size exceeding limit`);\n\n        currentSize -= size;\n      }\n    }\n\n    return result;\n  }\n\n  private getByteSize(obj: any): number {\n    const serialized = JSON.stringify(obj);\n\n    // Use TextEncoder if available, otherwise fallback to encodeURIComponent\n    if (typeof TextEncoder !== \"undefined\") {\n      return new TextEncoder().encode(serialized).length;\n    } else {\n      return encodeURIComponent(serialized).replace(/%[A-F\\d]{2}/g, \"U\").length;\n    }\n  }\n\n  /**\n   * Asynchronously flushes all events that are not yet sent to the server.\n   * This function always resolves, even if there were errors when flushing.\n   * Errors are emitted as \"error\" events and the promise resolves.\n   *\n   * @returns {Promise<void>} A promise that resolves when the flushing is completed.\n   */\n  flushAsync(): Promise<void> {\n    return new Promise((resolve, _reject) => {\n      try {\n        this.flush((err, data) => {\n          if (err) {\n            logIngestionError(err);\n            resolve();\n          } else {\n            resolve(data);\n          }\n        });\n        // safeguard against unexpected synchronous errors\n      } catch (e) {\n        console.error(\"[Langfuse SDK] Error while flushing Langfuse\", e);\n      }\n    });\n  }\n\n  // Flushes all events that are not yet sent to the server\n  flush(callback?: (err?: any, data?: any) => void): void {\n    if (this._flushTimer) {\n      clearTimeout(this._flushTimer);\n      this._flushTimer = null;\n    }\n\n    const queue = this.getPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue) || [];\n\n    if (!queue.length) {\n      return callback?.();\n    }\n\n    const items = queue.splice(0, this.flushAt);\n    this.setPersistedProperty<LangfuseQueueItem[]>(LangfusePersistedProperty.Queue, queue);\n\n    const MAX_MSG_SIZE = 1_000_000;\n    const BATCH_SIZE_LIMIT = 2_500_000;\n\n    this.processQueueItems(items, MAX_MSG_SIZE, BATCH_SIZE_LIMIT);\n\n    const promiseUUID = generateUUID();\n\n    const done = (err?: any): void => {\n      if (err) {\n        this._events.emit(\"error\", err);\n      }\n      callback?.(err, items);\n      this._events.emit(\"flush\", items);\n    };\n\n    const payload = JSON.stringify({\n      batch: items,\n      metadata: {\n        batch_size: items.length,\n        sdk_integration: this.sdkIntegration,\n        sdk_version: this.getLibraryVersion(),\n        sdk_variant: this.getLibraryId(),\n        public_key: this.publicKey,\n        sdk_name: \"langfuse-js\",\n      },\n    }); // implicit conversion also of dates to strings\n\n    const url = `${this.baseUrl}/api/public/ingestion`;\n\n    const fetchOptions = this._getFetchOptions({\n      method: \"POST\",\n      body: payload,\n    });\n\n    const requestPromise = this.fetchWithRetry(url, fetchOptions)\n      .then(() => done())\n      .catch((err) => {\n        done(err);\n      });\n    this.pendingPromises[promiseUUID] = requestPromise;\n    requestPromise.finally(() => {\n      delete this.pendingPromises[promiseUUID];\n    });\n  }\n\n  public processQueueItems(\n    queue: LangfuseQueueItem[],\n    MAX_MSG_SIZE: number,\n    BATCH_SIZE_LIMIT: number\n  ): { processedItems: LangfuseQueueItem[]; remainingItems: LangfuseQueueItem[] } {\n    let totalSize = 0;\n    const processedItems: LangfuseQueueItem[] = [];\n    const remainingItems: LangfuseQueueItem[] = [];\n\n    for (let i = 0; i < queue.length; i++) {\n      try {\n        const itemSize = new Blob([JSON.stringify(queue[i])]).size;\n\n        // discard item if it exceeds the maximum size per event\n        if (itemSize > MAX_MSG_SIZE) {\n          console.warn(`Item exceeds size limit (size: ${itemSize}), dropping item.`);\n          continue;\n        }\n\n        // if adding the next item would exceed the batch size limit, stop processing\n        if (totalSize + itemSize >= BATCH_SIZE_LIMIT) {\n          console.debug(`hit batch size limit (size: ${totalSize + itemSize})`);\n          remainingItems.push(...queue.slice(i));\n          console.log(`Remaining items: ${remainingItems.length}`);\n          console.log(`processes items: ${processedItems.length}`);\n          break;\n        }\n\n        // only add the item if it passes both requirements\n        totalSize += itemSize;\n        processedItems.push(queue[i]);\n      } catch (error) {\n        console.error(`[Langfuse SDK] ${error}`);\n        remainingItems.push(...queue.slice(i));\n        break;\n      }\n    }\n\n    return { processedItems, remainingItems };\n  }\n\n  _getFetchOptions(p: {\n    method: LangfuseFetchOptions[\"method\"];\n    body?: LangfuseFetchOptions[\"body\"];\n    fetchTimeout?: number;\n  }): LangfuseFetchOptions {\n    const fetchOptions: LangfuseFetchOptions = {\n      method: p.method,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-Langfuse-Sdk-Name\": \"langfuse-js\",\n        \"X-Langfuse-Sdk-Version\": this.getLibraryVersion(),\n        \"X-Langfuse-Sdk-Variant\": this.getLibraryId(),\n        \"X-Langfuse-Sdk-Integration\": this.sdkIntegration,\n        \"X-Langfuse-Public-Key\": this.publicKey,\n        ...this.constructAuthorizationHeader(this.publicKey, this.secretKey),\n      },\n      body: p.body,\n      ...(p.fetchTimeout !== undefined ? { signal: AbortSignal.timeout(p.fetchTimeout) } : {}),\n    };\n\n    return fetchOptions;\n  }\n\n  private constructAuthorizationHeader(\n    publicKey: string,\n    secretKey?: string\n  ): {\n    Authorization: string;\n  } {\n    if (secretKey === undefined) {\n      return { Authorization: \"Bearer \" + publicKey };\n    } else {\n      const encodedCredentials =\n        typeof btoa === \"function\"\n          ? // btoa() is available, the code is running in a browser or edge environment\n            btoa(publicKey + \":\" + secretKey)\n          : // btoa() is not available, the code is running in Node.js\n            Buffer.from(publicKey + \":\" + secretKey).toString(\"base64\");\n\n      return { Authorization: \"Basic \" + encodedCredentials };\n    }\n  }\n\n  private async fetchWithRetry(\n    url: string,\n    options: LangfuseFetchOptions,\n    retryOptions?: RetriableOptions\n  ): Promise<LangfuseFetchResponse> {\n    (AbortSignal as any).timeout ??= function timeout(ms: number) {\n      const ctrl = new AbortController();\n      setTimeout(() => ctrl.abort(), ms);\n      return ctrl.signal;\n    };\n\n    return await retriable(\n      async () => {\n        let res: LangfuseFetchResponse<IngestionReturnType> | null = null;\n        try {\n          res = await this.fetch(url, {\n            signal: AbortSignal.timeout(this.requestTimeout),\n            ...options,\n          });\n        } catch (e) {\n          // fetch will only throw on network errors or on timeouts\n          throw new LangfuseFetchNetworkError(e);\n        }\n\n        if (res.status < 200 || res.status >= 400) {\n          const body = await res.json();\n          throw new LangfuseFetchHttpError(res, JSON.stringify(body));\n        }\n        const returnBody = await res.json();\n        if (res.status === 207 && returnBody.errors.length > 0) {\n          throw new LangfuseFetchHttpError(res, JSON.stringify(returnBody.errors));\n        }\n\n        return res;\n      },\n      { ...this._retryOptions, ...retryOptions },\n      (string) => this._events.emit(\"retry\", string + \", \" + url + \", \" + JSON.stringify(options))\n    );\n  }\n\n  private async fetchAndLogErrors<T>(url: string, options: LangfuseFetchOptions): Promise<T> {\n    const res = await this.fetch(url, options);\n    const data = await res.json();\n\n    if (res.status < 200 || res.status >= 400) {\n      logIngestionError(new LangfuseFetchHttpError(res, JSON.stringify(data)));\n    }\n\n    return data;\n  }\n\n  async shutdownAsync(): Promise<void> {\n    clearTimeout(this._flushTimer);\n    try {\n      await this.flushAsync();\n      await Promise.all(\n        Object.values(this.pendingPromises).map((x) =>\n          x.catch(() => {\n            // ignore errors as we are shutting down and can't deal with them anyways.\n          })\n        )\n      );\n      // flush again in case there are new events that were added while we were waiting for the pending promises to resolve\n      await this.flushAsync();\n    } catch (e) {\n      console.error(\"[Langfuse SDK] Error while shutting down Langfuse\", e);\n    }\n  }\n\n  shutdown(): void {\n    console.warn(\n      \"shutdown() is deprecated. It does not wait for all events to be processed. Please use shutdownAsync() instead.\"\n    );\n    void this.shutdownAsync();\n  }\n\n  protected async awaitAllQueuedAndPendingRequests(): Promise<void> {\n    clearTimeout(this._flushTimer);\n    await this.flushAsync();\n    await Promise.all(Object.values(this.pendingPromises));\n  }\n}\n\nexport abstract class LangfuseWebStateless extends LangfuseCoreStateless {\n  constructor(params: Omit<LangfuseCoreOptions, \"secretKey\">) {\n    const { flushAt, flushInterval, publicKey, enabled, ...rest } = params;\n    let isObservabilityEnabled = enabled === false ? false : true;\n\n    if (isObservabilityEnabled && !publicKey) {\n      isObservabilityEnabled = false;\n      console.warn(\n        \"Langfuse public key not passed to constructor and not set as 'LANGFUSE_PUBLIC_KEY' environment variable. No observability data will be sent to Langfuse.\"\n      );\n    }\n\n    super({\n      ...rest,\n      publicKey,\n      flushAt: flushAt ?? 1,\n      flushInterval: flushInterval ?? 0,\n      enabled: isObservabilityEnabled,\n    });\n  }\n\n  async score(body: CreateLangfuseScoreBody): Promise<this> {\n    this.scoreStateless(body);\n    await this.awaitAllQueuedAndPendingRequests();\n    return this;\n  }\n}\n\nexport abstract class LangfuseCore extends LangfuseCoreStateless {\n  private _promptCache: LangfusePromptCache;\n\n  constructor(params: LangfuseCoreOptions) {\n    const { publicKey, secretKey, enabled } = params;\n    let isObservabilityEnabled = enabled === false ? false : true;\n\n    if (!isObservabilityEnabled) {\n      console.warn(\"Langfuse is disabled. No observability data will be sent to Langfuse.\");\n    } else if (!secretKey) {\n      isObservabilityEnabled = false;\n      console.warn(\n        \"Langfuse secret key was not passed to constructor or not set as 'LANGFUSE_SECRET_KEY' environment variable. No observability data will be sent to Langfuse.\"\n      );\n    } else if (!publicKey) {\n      isObservabilityEnabled = false;\n      console.warn(\n        \"Langfuse public key was not passed to constructor or not set as 'LANGFUSE_PUBLIC_KEY' environment variable. No observability data will be sent to Langfuse.\"\n      );\n    }\n\n    super({ ...params, enabled: isObservabilityEnabled });\n    this._promptCache = new LangfusePromptCache();\n  }\n\n  trace(body?: CreateLangfuseTraceBody): LangfuseTraceClient {\n    const id = this.traceStateless(body ?? {});\n    const t = new LangfuseTraceClient(this, id);\n    if (getEnv(\"DEFER\") && body) {\n      try {\n        const deferRuntime = getEnv<DeferRuntime>(\"__deferRuntime\");\n        if (deferRuntime) {\n          deferRuntime.langfuseTraces([\n            {\n              id: id,\n              name: body.name || \"\",\n              url: t.getTraceUrl(),\n            },\n          ]);\n        }\n      } catch {}\n    }\n    return t;\n  }\n\n  span(body: CreateLangfuseSpanBody): LangfuseSpanClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.spanStateless({ ...body, traceId });\n    return new LangfuseSpanClient(this, id, traceId);\n  }\n\n  generation(\n    body: Omit<CreateLangfuseGenerationBody, \"promptName\" | \"promptVersion\"> & PromptInput\n  ): LangfuseGenerationClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.generationStateless({ ...body, traceId });\n    return new LangfuseGenerationClient(this, id, traceId);\n  }\n\n  event(body: CreateLangfuseEventBody): LangfuseEventClient {\n    const traceId = body.traceId || this.traceStateless({ name: body.name });\n    const id = this.eventStateless({ ...body, traceId });\n    return new LangfuseEventClient(this, id, traceId);\n  }\n\n  score(body: CreateLangfuseScoreBody): this {\n    this.scoreStateless(body);\n    return this;\n  }\n\n  async getDataset(\n    name: string,\n    options?: {\n      fetchItemsPageSize: number;\n    }\n  ): Promise<{\n    id: string;\n    name: string;\n    description?: string;\n    metadata?: any;\n    projectId: string;\n    items: DatasetItem[];\n  }> {\n    const dataset = await this._getDataset(name);\n    const items: GetLangfuseDatasetItemsResponse[\"data\"] = [];\n\n    let page = 1;\n    while (true) {\n      const itemsResponse = await this._getDatasetItems({\n        datasetName: name,\n        limit: options?.fetchItemsPageSize ?? 50,\n        page,\n      });\n      items.push(...itemsResponse.data);\n      if (itemsResponse.meta.totalPages <= page) {\n        break;\n      }\n      page++;\n    }\n\n    const returnDataset = {\n      ...dataset,\n      description: dataset.description ?? undefined,\n      metadata: dataset.metadata ?? undefined,\n      items: items.map((item) => ({\n        ...item,\n        link: async (\n          obj: LangfuseObjectClient,\n          runName: string,\n          runArgs?: {\n            description?: string;\n            metadata?: any;\n          }\n        ) => {\n          await this.awaitAllQueuedAndPendingRequests();\n          const data = await this.createDatasetRunItem({\n            runName,\n            datasetItemId: item.id,\n            observationId: obj.observationId,\n            traceId: obj.traceId,\n            runDescription: runArgs?.description,\n            metadata: runArgs?.metadata,\n          });\n          return data;\n        },\n      })),\n    };\n\n    return returnDataset;\n  }\n\n  async createPrompt(body: CreateChatPromptBody): Promise<ChatPromptClient>;\n  async createPrompt(body: CreateTextPromptBody): Promise<TextPromptClient>;\n  async createPrompt(body: CreatePromptBody): Promise<LangfusePromptClient> {\n    const labels = body.labels ?? [];\n\n    const promptResponse =\n      body.type === \"chat\" // necessary to get types right here\n        ? await this.createPromptStateless({\n            ...body,\n            labels: body.isActive ? [...new Set([...labels, \"production\"])] : labels, // backward compatibility for isActive\n          })\n        : await this.createPromptStateless({\n            ...body,\n            type: body.type ?? \"text\",\n            labels: body.isActive ? [...new Set([...labels, \"production\"])] : labels, // backward compatibility for isActive\n          });\n\n    if (promptResponse.type === \"chat\") {\n      return new ChatPromptClient(promptResponse);\n    }\n\n    return new TextPromptClient(promptResponse);\n  }\n\n  async getPrompt(\n    name: string,\n    version?: number,\n    options?: {\n      label?: string;\n      cacheTtlSeconds?: number;\n      fallback?: string;\n      maxRetries?: number;\n      type?: \"text\";\n      fetchTimeoutMs?: number;\n    }\n  ): Promise<TextPromptClient>;\n  async getPrompt(\n    name: string,\n    version?: number,\n    options?: {\n      label?: string;\n      cacheTtlSeconds?: number;\n      fallback?: ChatMessage[];\n      maxRetries?: number;\n      type: \"chat\";\n      fetchTimeoutMs?: number;\n    }\n  ): Promise<ChatPromptClient>;\n  async getPrompt(\n    name: string,\n    version?: number,\n    options?: {\n      label?: string;\n      cacheTtlSeconds?: number;\n      fallback?: ChatMessage[] | string;\n      maxRetries?: number;\n      type?: \"chat\" | \"text\";\n      fetchTimeoutMs?: number;\n    }\n  ): Promise<LangfusePromptClient> {\n    const cacheKey = this._getPromptCacheKey({ name, version, label: options?.label });\n    const cachedPrompt = this._promptCache.getIncludingExpired(cacheKey);\n    if (!cachedPrompt || options?.cacheTtlSeconds === 0) {\n      try {\n        return await this._fetchPromptAndUpdateCache({\n          name,\n          version,\n          label: options?.label,\n          cacheTtlSeconds: options?.cacheTtlSeconds,\n          maxRetries: options?.maxRetries,\n          fetchTimeout: options?.fetchTimeoutMs,\n        });\n      } catch (err) {\n        if (options?.fallback) {\n          const sharedFallbackParams = {\n            name,\n            version: version ?? 0,\n            labels: options.label ? [options.label] : [],\n            cacheTtlSeconds: options?.cacheTtlSeconds,\n            config: {},\n            tags: [],\n          };\n\n          if (options.type === \"chat\") {\n            return new ChatPromptClient(\n              {\n                ...sharedFallbackParams,\n                type: \"chat\",\n                prompt: options.fallback as ChatMessage[],\n              },\n              true\n            );\n          } else {\n            return new TextPromptClient(\n              {\n                ...sharedFallbackParams,\n                type: \"text\",\n                prompt: options.fallback as string,\n              },\n              true\n            );\n          }\n        }\n\n        throw err;\n      }\n    }\n\n    if (cachedPrompt.isExpired) {\n      // If the cache is not currently being refreshed, start refreshing it and register the promise in the cache\n      if (!this._promptCache.isRefreshing(cacheKey)) {\n        const refreshPromptPromise = this._fetchPromptAndUpdateCache({\n          name,\n          version,\n          label: options?.label,\n          cacheTtlSeconds: options?.cacheTtlSeconds,\n          maxRetries: options?.maxRetries,\n          fetchTimeout: options?.fetchTimeoutMs,\n        }).catch(() => {\n          console.warn(\n            `Failed to refresh prompt cache '${cacheKey}', stale cache will be used until next refresh succeeds.`\n          );\n        });\n        this._promptCache.addRefreshingPromise(cacheKey, refreshPromptPromise);\n      }\n\n      return cachedPrompt.value;\n    }\n\n    return cachedPrompt.value;\n  }\n\n  private _getPromptCacheKey(params: { name: string; version?: number; label?: string }): string {\n    const { name, version, label } = params;\n    const parts = [name];\n\n    if (version !== undefined) {\n      parts.push(\"version:\" + version.toString());\n    } else if (label !== undefined) {\n      parts.push(\"label:\" + label);\n    } else {\n      parts.push(\"label:production\");\n    }\n\n    return parts.join(\"-\");\n  }\n\n  private async _fetchPromptAndUpdateCache(params: {\n    name: string;\n    version?: number;\n    cacheTtlSeconds?: number;\n    label?: string;\n    maxRetries?: number;\n    fetchTimeout?: number;\n  }): Promise<LangfusePromptClient> {\n    const cacheKey = this._getPromptCacheKey(params);\n\n    try {\n      const { name, version, cacheTtlSeconds, label, maxRetries, fetchTimeout } = params;\n\n      const { data, fetchResult } = await this.getPromptStateless(name, version, label, maxRetries, fetchTimeout);\n      if (fetchResult === \"failure\") {\n        throw Error(data.message ?? \"Internal error while fetching prompt\");\n      }\n\n      let prompt: LangfusePromptClient;\n      if (data.type === \"chat\") {\n        prompt = new ChatPromptClient(data);\n      } else {\n        prompt = new TextPromptClient(data);\n      }\n\n      this._promptCache.set(cacheKey, prompt, cacheTtlSeconds);\n\n      return prompt;\n    } catch (error) {\n      console.error(`[Langfuse SDK] Error while fetching prompt '${cacheKey}':`, error);\n\n      throw error;\n    }\n  }\n\n  _updateSpan(body: UpdateLangfuseSpanBody): this {\n    this.updateSpanStateless(body);\n    return this;\n  }\n\n  _updateGeneration(body: UpdateLangfuseGenerationBody): this {\n    this.updateGenerationStateless(body);\n    return this;\n  }\n}\n\nexport abstract class LangfuseObjectClient {\n  public readonly client: LangfuseCore;\n  public readonly id: string; // id of item itself\n  public readonly traceId: string; // id of trace, if traceClient this is the same as id\n  public readonly observationId: string | null; // id of observation, if observationClient this is the same as id, if traceClient this is null\n\n  constructor({\n    client,\n    id,\n    traceId,\n    observationId,\n  }: {\n    client: LangfuseCore;\n    id: string;\n    traceId: string;\n    observationId: string | null;\n  }) {\n    this.client = client;\n    this.id = id;\n    this.traceId = traceId;\n    this.observationId = observationId;\n  }\n\n  event(body: Omit<CreateLangfuseEventBody, \"traceId\" | \"parentObservationId\">): LangfuseEventClient {\n    return this.client.event({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  span(body: Omit<CreateLangfuseSpanBody, \"traceId\" | \"parentObservationId\">): LangfuseSpanClient {\n    return this.client.span({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  generation(\n    body: Omit<CreateLangfuseGenerationBody, \"traceId\" | \"parentObservationId\" | \"promptName\" | \"promptVersion\"> &\n      PromptInput\n  ): LangfuseGenerationClient {\n    return this.client.generation({\n      ...body,\n      traceId: this.traceId,\n      parentObservationId: this.observationId,\n    });\n  }\n\n  score(body: Omit<CreateLangfuseScoreBody, \"traceId\" | \"parentObservationId\">): this {\n    this.client.score({\n      ...body,\n      traceId: this.traceId,\n      observationId: this.observationId,\n    });\n    return this;\n  }\n\n  getTraceUrl(): string {\n    return `${this.client.baseUrl}/trace/${this.traceId}`;\n  }\n}\n\nexport class LangfuseTraceClient extends LangfuseObjectClient {\n  constructor(client: LangfuseCore, traceId: string) {\n    super({ client, id: traceId, traceId, observationId: null });\n  }\n\n  update(body: Omit<CreateLangfuseTraceBody, \"id\">): this {\n    this.client.trace({\n      ...body,\n      id: this.id,\n    });\n    return this;\n  }\n}\n\nabstract class LangfuseObservationClient extends LangfuseObjectClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super({ client, id, traceId, observationId: id });\n  }\n}\n\nexport class LangfuseSpanClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n\n  update(body: Omit<UpdateLangfuseSpanBody, \"id\" | \"traceId\">): this {\n    this.client._updateSpan({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n    });\n    return this;\n  }\n\n  end(body?: Omit<UpdateLangfuseSpanBody, \"id\" | \"endTime\" | \"traceId\">): this {\n    this.client._updateSpan({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n      endTime: new Date(),\n    });\n    return this;\n  }\n}\n\nexport class LangfuseGenerationClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n\n  update(\n    body: Omit<UpdateLangfuseGenerationBody, \"id\" | \"traceId\" | \"promptName\" | \"promptVersion\"> & PromptInput\n  ): this {\n    this.client._updateGeneration({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n    });\n    return this;\n  }\n\n  end(\n    body?: Omit<UpdateLangfuseGenerationBody, \"id\" | \"traceId\" | \"endTime\" | \"promptName\" | \"promptVersion\"> &\n      PromptInput\n  ): this {\n    this.client._updateGeneration({\n      ...body,\n      id: this.id,\n      traceId: this.traceId,\n      endTime: new Date(),\n    });\n    return this;\n  }\n}\n\nexport class LangfuseEventClient extends LangfuseObservationClient {\n  constructor(client: LangfuseCore, id: string, traceId: string) {\n    super(client, id, traceId);\n  }\n}\n\nexport * from \"./types\";\nexport * from \"./openapi/server\";\n"],"names":["LangfusePersistedProperty","assert","truthyValue","message","Error","removeTrailingSlash","url","replace","retriable","fn","props","log","retryCount","retryDelay","retryCheck","lastError","i","Promise","resolve","setTimeout","res","e","JSON","stringify","generateUUID","globalThis","d","Date","getTime","d2","performance","now","c","r","Math","random","floor","toString","currentTimestamp","currentISOTime","toISOString","safeSetTimeout","timeout","t","unref","getEnv","key","process","env","configLangfuseSDK","params","secretRequired","publicKey","secretKey","coreOptions","finalPublicKey","finalSecretKey","undefined","finalBaseUrl","baseUrl","finalCoreOptions","encodeQueryParams","queryParams","URLSearchParams","Object","entries","forEach","value","append","SimpleEventEmitter","constructor","events","on","event","listener","push","filter","x","emit","payload","common_release_envs","getCommonReleaseEnvs","mustache","escape","text","BasePromptClient","prompt","isFallback","type","name","version","config","labels","tags","_transformToLangchainVariables","content","toJSON","TextPromptClient","promptResponse","compile","variables","render","getLangchainPrompt","ChatPromptClient","map","chatMessage","DEFAULT_PROMPT_CACHE_TTL_SECONDS","LangfusePromptCacheItem","ttlSeconds","_expiry","isExpired","LangfusePromptCache","_cache","Map","_defaultTtlSeconds","_refreshingKeys","getIncludingExpired","get","set","effectiveTtlSeconds","addRefreshingPromise","promise","then","delete","catch","isRefreshing","has","LangfuseMemoryStorage","_memoryStorage","getProperty","setProperty","MAX_EVENT_SIZE","LangfuseFetchHttpError","response","body","status","LangfuseFetchNetworkError","error","cause","isLangfuseFetchHttpError","isLangfuseFetchNetworkError","isLangfuseFetchError","err","SUPPORT_URL","API_DOCS_URL","RBAC_DOCS_URL","INSTALLATION_DOCS_URL","RATE_LIMITS_URL","NPM_PACKAGE_URL","updatePromptResponse","defaultServerErrorPrompt","defaultErrorResponse","errorResponseByCode","getErrorResponseByCode","code","errorResponse","logIngestionError","console","LangfuseCoreStateless","debugMode","pendingPromises","_events","enabled","options","flushAt","max","flushInterval","release","mask","_retryOptions","fetchRetryCount","fetchRetryDelay","requestTimeout","sdkIntegration","getSdkIntegration","getCommonEventProperties","$lib","getLibraryId","$lib_version","getLibraryVersion","cb","debug","removeDebugCallback","traceStateless","id","bodyId","timestamp","bodyTimestamp","bodyRelease","rest","parsedBody","enqueue","eventStateless","startTime","bodyStartTime","spanStateless","generationStateless","promptDetails","promptName","promptVersion","scoreStateless","updateSpanStateless","updateGenerationStateless","_getDataset","encodedName","encodeURIComponent","fetchAndLogErrors","_getFetchOptions","method","_getDatasetItems","query","fetchTraces","data","meta","fetchTrace","traceId","fetchObservations","fetchObservation","observationId","fetchSessions","getDatasetRun","encodedDatasetName","datasetName","encodedRunName","runName","getDatasetRuns","createDatasetRunItem","createDataset","dataset","createDatasetItem","getDatasetItem","_parsePayload","parse","createPromptStateless","getPromptStateless","label","maxRetries","size","boundedMaxRetries","_getBoundedMaxRetries","defaultMaxRetries","maxRetriesUpperBound","retryOptions","retryLogger","string","fetch","fetchTimeout","json","fetchResult","min","maskEventBodyInPlace","finalEventBody","truncateEventBody","queue","getPersistedProperty","Queue","metadata","setPersistedProperty","length","flush","_flushTimer","maskableKeys","maxByteSize","bodySize","getByteSize","keysToCheck","keySizes","sort","a","b","result","currentSize","prototype","hasOwnProperty","call","obj","serialized","TextEncoder","encode","flushAsync","_reject","callback","clearTimeout","items","splice","MAX_MSG_SIZE","BATCH_SIZE_LIMIT","processQueueItems","promiseUUID","done","batch","batch_size","sdk_integration","sdk_version","sdk_variant","public_key","sdk_name","fetchOptions","requestPromise","fetchWithRetry","finally","totalSize","processedItems","remainingItems","itemSize","Blob","warn","slice","p","headers","constructAuthorizationHeader","signal","AbortSignal","Authorization","encodedCredentials","btoa","Buffer","from","ms","ctrl","AbortController","abort","returnBody","errors","shutdownAsync","all","values","shutdown","awaitAllQueuedAndPendingRequests","LangfuseWebStateless","isObservabilityEnabled","score","LangfuseCore","_promptCache","trace","LangfuseTraceClient","deferRuntime","langfuseTraces","getTraceUrl","span","LangfuseSpanClient","generation","LangfuseGenerationClient","LangfuseEventClient","getDataset","page","itemsResponse","limit","fetchItemsPageSize","totalPages","returnDataset","description","item","link","runArgs","datasetItemId","runDescription","createPrompt","isActive","Set","getPrompt","cacheKey","_getPromptCacheKey","cachedPrompt","cacheTtlSeconds","_fetchPromptAndUpdateCache","fetchTimeoutMs","fallback","sharedFallbackParams","refreshPromptPromise","parts","join","_updateSpan","_updateGeneration","LangfuseObjectClient","client","parentObservationId","update","LangfuseObservationClient","end","endTime"],"mappings":"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"}